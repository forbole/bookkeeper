package table

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"

	subtratetypes "github.com/forbole/bookkeeper/module/subtrate/types"
)

/*
curl -X POST 'https://polkadot.api.subscan.io/api/scan/account/reward_slash' \
  --header 'Content-Type: application/json' \
  --header 'X-API-Key: YOUR_KEY' \
  --data-raw '{
    "row": 20,
    "page": 1,
    "address": "15fTw39Ju2jJiHeGe1fJ5DtgugUauy9tr2HZuiRNFwqnGQ1Q"
  }'
*/
// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

// curl -X POST 'https://polkadot.api.subscan.io/api/scan/account/reward_slash' \
//   --header 'Content-Type: application/json' \
//   --header 'X-API-Key: YOUR_KEY' \
//   --data-raw '{
//     "row": 20,
//     "page": 1,
//     "address": "15fTw39Ju2jJiHeGe1fJ5DtgugUauy9tr2HZuiRNFwqnGQ1Q"
//   }'

func GetRewardCommission(api string, address string)


func GetRewardSlash(api string, address string)(*subtratetypes.RewardSlash,error){
	fmt.Println(api)
	query := fmt.Sprintf("https://%s.api.subscan.io/api/scan/account/reward_slash",
		api)
	
		type Payload struct {
			Row     int    `json:"row"`
			Page    int    `json:"page"`
			Address string `json:"address"`
		}
		
		data := Payload{
			Row:20,
			Page:1,
			Address:address,
		}
		payloadBytes, err := json.Marshal(data)
		if err != nil {
			// handle err
		}
		body := bytes.NewReader(payloadBytes)
	
	req,err:=http.NewRequest("POST",query,body)
	if err!=nil{
		return nil,err
	}
	req.Header.Add("Content-Type","application/json")
	req.Header.Add("X-API-Key",os.Getenv("SUBSCAN_API_KEY"))

	//fmt.Println(query)
	var bz []byte
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("Fail to get tx from rpc:%s", err)
	}
	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("Fail to get tx from rpc:Status :%s", resp.Status)
	}

	bz, err = io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	var rewardSlash subtratetypes.RewardSlash
	err = json.Unmarshal(bz, &rewardSlash)
	if err != nil {
		return nil, fmt.Errorf("Fail to marshal:%s", err)
	}

	return &rewardSlash,nil
}